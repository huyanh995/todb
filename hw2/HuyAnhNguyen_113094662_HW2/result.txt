Q1:
Result with:    CALL gen_salary_histogram(30000, 170000, 7);
+------+---------+--------+------+
|BINNUM|FREQUENCY|BINSTART|BINEND|
+------+---------+--------+------+
|1     |22       |30000   |50000 |
|2     |11       |50000   |70000 |
|3     |5        |70000   |90000 |
|4     |3        |90000   |110000|
|5     |0        |110000  |130000|
|6     |0        |130000  |150000|
|7     |1        |150000  |170000|
+------+---------+--------+------+

Benchmark: 10 runs with identical parameters
gen_salary_histogram        171.9ms
gen_salary_histogram2       162.9ms

For our 42-record Employee dataset, the performance difference is minimal.
However, with larger datasets, the set-aggregate method in gen_salary_histogram2
is likely to offer a notable speed advantage.

Q2:
Result with:
java -cp .:db2jcc4.jar SalaryHistogram 30000 170000 //192.168.1.3:25000/sample dbhuyanh 1

Connected to the database!
**** Pulled the salary data
**** Transaction committed
**** Disconnected from data source

Histogram for salary in range [30000.0, 170000.0), 7 bins
+--------+-----------+------------+------------+
| binnum | frequency |  binstart  |   binend   |
+--------+-----------+------------+------------+
| 1      | 22        |   30000.00 |   50000.00 |
| 2      | 11        |   50000.00 |   70000.00 |
| 3      | 5         |   70000.00 |   90000.00 |
| 4      | 3         |   90000.00 |  110000.00 |
| 5      | 0         |  110000.00 |  130000.00 |
| 6      | 0         |  130000.00 |  150000.00 |
| 7      | 1         |  150000.00 |  170000.00 |
+--------+-----------+------------+------------+